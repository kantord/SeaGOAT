{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":"<p> SeaGOAT </p> <p>A code search engine for the AI age. SeaGOAT is a local search tool that leverages vector embeddings to enable you to search your codebase semantically.</p> <p> </p>"},{"location":"#getting-started","title":"Getting started","text":""},{"location":"#install-seagoat","title":"Install SeaGOAT","text":"<p>In order to install SeaGOAT, you need to have the following dependencies already installed on your computer:</p> <ul> <li>Python 3.11 or newer</li> <li>ripgrep</li> <li>bat (optional, highly recommended)</li> </ul> <p>When <code>bat</code> is installed, it is used to display results as long as color is enabled. When SeaGOAT is used as part of a pipeline, a grep-line output format is used. When color is enabled, but <code>bat</code> is not installed, SeaGOAT will highlight the output using pygments. Using <code>bat</code> is recommended.</p> <p>To install SeaGOAT using <code>pipx</code>, use the following command:</p> <pre><code>pipx install seagoat\n</code></pre>"},{"location":"#system-requirements","title":"System requirements","text":""},{"location":"#hardware","title":"Hardware","text":"<p>Should work on any decent laptop.</p>"},{"location":"#operating-system","title":"Operating system","text":"<p>SeaGOAT is designed to work on Linux (tested \u2705), macOS (partly tested, help \ud83d\ude4f) and Windows (help needed \ud83d\ude4f).</p>"},{"location":"#start-seagoat-server","title":"Start SeaGOAT server","text":"<p>In order to use SeaGOAT in your project, you have to start the SeaGOAT server using the following command:</p> <pre><code>seagoat-server start /path/to/your/repo\n</code></pre>"},{"location":"#search-your-repository","title":"Search your repository","text":"<p>If you have the server running, you can simply use the <code>gt</code> or <code>seagoat</code> command to query your repository. For example:</p> <pre><code>gt \"Where are the numbers rounded\"\n</code></pre> <p>You can also use Regular Expressions in your queries, for example</p> <pre><code>gt \"function calc_.* that deals with taxes\"\n</code></pre>"},{"location":"#stopping-the-server","title":"Stopping the server","text":"<p>You can stop the running server using the following command:</p> <pre><code>seagoat-server stop /path/to/your/repo\n</code></pre>"},{"location":"#configuring-seagoat","title":"Configuring SeaGOAT","text":"<p>SeaGOAT can be tailored to your needs through YAML configuration files, either globally or project-specifically with a <code>.seagoat.yml</code> file. For instance:</p> <pre><code># .seagoat.yml\n\nserver:\n  port: 31134  # Specify server port\n</code></pre> <p>Check out the documentation for more details!</p>"},{"location":"#development","title":"Development","text":"<p>Requirements:</p> <ul> <li>Poetry</li> <li>Python 3.11 or newer</li> <li>ripgrep</li> </ul>"},{"location":"#install-dependencies","title":"Install dependencies","text":"<p>After cloning the repository, install dependencies using the following command:</p> <pre><code>poetry install\n</code></pre>"},{"location":"#running-tests","title":"Running tests","text":""},{"location":"#watch-mode-recommended","title":"Watch mode (recommended)","text":"<pre><code>poetry run ptw\n</code></pre>"},{"location":"#test-changed-files","title":"Test changed files","text":"<pre><code>poetry run pytest .  --testmon\n</code></pre>"},{"location":"#test-all-files","title":"Test all files","text":"<pre><code>poetry run pytest .\n</code></pre>"},{"location":"#manual-testing","title":"Manual testing","text":"<p>You can test any SeaGOAT command manually in your local development environment. For example to test the development version of the <code>seagoat-server</code> command, you can run:</p> <pre><code>poetry run seagoat-server start ~/path/an/example/repository\n</code></pre>"},{"location":"#faq","title":"FAQ","text":"<p>The points in this FAQ are indications of how SeaGOAT works, but are not a legal contract. SeaGOAT is licensed under an open source license and if you are in doubt about the privacy/safety/etc implications of SeaGOAT, you are welcome to examine the source code, raise your concerns, or create a pull request to fix a problem.</p>"},{"location":"#how-does-seagoat-work-does-it-send-my-data-to-chatgpt","title":"How does SeaGOAT work? Does it send my data to ChatGPT?","text":"<p>SeaGOAT does not rely on 3rd party APIs or any remote APIs and executes all functionality locally using the SeaGOAT server that you are able to run on your own machine.</p> <p>Instead of relying on APIs or \"connecting to ChatGPT\", it uses the vector database called ChromaDB, with a local vector embedding engine and telemetry disabled by default.</p> <p>Apart from that, SeaGOAT also uses ripgrep, a regular-expression based code search engine in order to provider regular expression/keyword based matches in addition to the \"AI-based\" matches.</p> <p>While the current version of SeaGOAT does not send your data to remote servers, it might be possible that in the future there will be optional features that do so, if any further improvement can be gained from that.</p>"},{"location":"#why-does-seagoat-need-a-server","title":"Why does SeaGOAT need a server?","text":"<p>SeaGOAT needs a server in order to provide a speedy response. SeaGOAT heavily relies on vector embeddings and vector databases, which at the moment cannot be replace with an architecture that processes files on the fly.</p> <p>It's worth noting that you are able to run SeaGOAT server entirely locally, and it works even if you don't have an internet connection. This use case does not require you to share data with a remote server, you are able to use your own SeaGOAT server locally, albeit it's also possible to run a SeaGOAT server and allow other computers to connect to it, if you so wish.</p>"},{"location":"#does-seagoat-create-ai-derived-work-is-seagoat-ethical","title":"Does SeaGOAT create AI-derived work? Is SeaGOAT ethical?","text":"<p>If you are concerned about the ethical implications of using AI tools keep in mind that SeaGOAT is not a code generator but a code search engine, therefore it does not create AI derived work.</p> <p>That being said, a language model is being used to generate vector embeddings. At the moment SeaGOAT uses ChromaDB's default model for calculating vector embeddings, and I am not aware of this being an ethical concern.</p>"},{"location":"#what-programming-languages-are-supported","title":"What programming languages are supported?","text":"<p>Currently SeaGOAT is hard coded to only process files in the following formats:</p> <ul> <li>Text Files (<code>*.txt</code>)</li> <li>Markdown (<code>*.md</code>)</li> <li>Python (<code>*.py</code>)</li> <li>C (<code>*.c</code>, <code>*.h</code>)</li> <li>C++ (<code>*.cpp</code>, <code>*.cc</code>, <code>*.cxx</code>, <code>*.hpp</code>)</li> <li>TypeScript (<code>*.ts</code>, <code>*.tsx</code>)</li> <li>JavaScript (<code>*.js</code>, <code>*.jsx</code>)</li> <li>HTML (<code>*.html</code>)</li> <li>Go (<code>*.go</code>)</li> <li>Java (<code>*.java</code>)</li> <li>PHP (<code>*.php</code>)</li> <li>Ruby (<code>*.rb</code>)</li> </ul>"},{"location":"#why-is-seagoat-processing-files-so-slowly-while-barely-using-my-cpu","title":"Why is SeaGOAT processing files so slowly while barely using my CPU?","text":"<p>Since processing files for large repositories can take a long time, SeaGOAT is designed to allow you to use your computer while processing files. It is an intentional design choice to avoid blocking/slowing down your computer.</p> <p>This design decision does not affect the performance of queries.</p> <p>By the way, you are able to use SeaGOAT to query your repository while it's processing your files! When you make a query, and the files are not processed yet, you will receive a warning with an estimation of the accuracy of your results. Also, regular expression/full text search based results will be displayed from the very beginning!</p>"},{"location":"#what-character-encodings-are-supported","title":"What character encodings are supported?","text":"<p>The preferred character encoding is UTF-8. Most other character encodings should also work. Only text files are supported, SeaGOAT ignores binary files.</p>"},{"location":"#where-does-seagoat-store-its-databasecache","title":"Where does SeaGOAT store it's database/cache?","text":"<p>Where SeaGOAT stores databases and cache depends on your operating system. For your convenience, you can use the <code>seagoat-server server-info</code> command to find out where these files are stored on your system.</p>"},{"location":"#can-i-host-seagoat-server-on-a-different-computer","title":"Can I host SeaGOAT server on a different computer?","text":"<p>Yes, if you would like to use SeaGOAT without having to run the server on the same computer, you can simply self-host SeaGOAT server on a different computer or in the cloud, and configure the <code>seagoat</code>/<code>gt</code> command to connect to this remote server through the internet.</p> <p>Keep in mind that SeaGOAT itself does not enforce any security as it is primarily designed to run locally. If you have private code that you do not wish to leak, you will have to make sure that only trusted people have access to the SeaGOAT server. This could be done by making it only available through a VPN that only your teammates can access.</p>"},{"location":"#can-i-ignore-filesdirectories","title":"Can I ignore files/directories?","text":"<p>SeaGOAT already ignores all files/directories ignored in your <code>.gitignore</code>. If you wish to ignore additional files but keep them in git, you can use the <code>ignorePatterns</code> attribute from the server configuration. Learn more</p>"},{"location":"configuration/","title":"Configuring SeaGOAT","text":""},{"location":"configuration/#introduction","title":"Introduction","text":"<p>Some features of SeaGOAT can be configured through config files. All configuration files are written in the YAML format.</p> <p>There are two types of configuration files:</p> <ul> <li>Global configuration files. Use <code>seagoat-server server-info</code> to find the location of this file on your system. Learn more.</li> <li>Project configuration files. Located in a file called <code>seagoat.yml</code> in the root folder of your repository.</li> </ul> <p>Both of these types of configuration files have the exact same format, and your project-wide configuration files are merged with the global configuration. Whenever both your local as well as global configuration files define a value, the local value takes precedence.</p> <p>This is an example of a configuration file:</p> <pre><code># .seagoat.yml\n\nserver:\n  port: 31134  # A port number to run the server on\n\n  # globs to ignore in addition to .gitignore\n  ignorePatterns:\n    - \"**/locales/*\" # Ignore all files inside 'locales' directories\n    - \"**/*.po\"     # Ignore all gettext translation files\n\nclient:\n  # Connect the CLI to a remove server\n  host: https://example.com/seagoat-instance/\n</code></pre>"},{"location":"configuration/#available-configuration-options","title":"Available configuration options","text":""},{"location":"configuration/#server","title":"Server","text":"<p>Server-related configuration resides under the <code>server</code> attribute in your config files.</p> <p>The following values can be configured:</p> <ul> <li><code>port</code>: The port number the server will run on</li> <li><code>ignorePatterns</code>: A list of glob patterns to ignore. Keep in mind that all files ignored by <code>.gitignore</code> are already ignored. You probably should not need to configure this value. It is only useful if there are some files that you wish to keep in git, but you wish to hide from SeaGOAT. Learn more about globs</li> <li><code>chroma</code>: Configurations for the ChromaDB based features.   Has the following attributes:</li> <li><code>embeddingFunction</code>:<ul> <li><code>name</code>: Name of the embedding function to use. See ChromaDB's docs for more</li> <li><code>arguments</code>: Arguments to pass to the embedding function.</li> <li> <p>If you wanted to use the <code>ONNXMiniLM_L6_V2</code> embedding model with TensorRT</p> <pre><code>server:\n...\nchroma:\n  embedding_function:\n    name: \"ONNXMiniLM_L6_V2\"\n    arguments:\n      preferred_providers: [\"TensorrtExecutionProvider\"]\n</code></pre> </li> </ul> </li> </ul>"},{"location":"configuration/#client","title":"Client","text":"<p>Configuration for the CLI (<code>gt</code> command) resides under the <code>client</code> attribute.</p> <p>The following values can be configured:</p> <ul> <li><code>host</code>: The URL of the SeaGOAT instance to connect to. This is only needed when you are hosting your SeaGOAT server on a remote computer. It is recommended to set this value in your project configuration file, so that you are still able to use the local server for different projects.</li> </ul>"},{"location":"developer/","title":"Developer documentation","text":"<p>This document was created to help you set up your development environment and to understand the project structure.</p>"},{"location":"developer/#setting-up-the-development-environment","title":"Setting up the development environment","text":""},{"location":"developer/#step-1-optional-install-seagoat","title":"Step 1: (Optional) Install SeaGOAT","text":"<p>This step is recommended in order to make sure that SeaGOAT works properly on your computer.</p> <p>Follow the official documentation</p>"},{"location":"developer/#step-2-make-sure-you-have-all-developer-dependencies-installed","title":"Step 2: Make sure you have all developer dependencies installed","text":"<p>The following dependencies need to be installed:</p> <ul> <li>Git</li> <li>Python 3.11 or newer</li> <li>Poetry</li> </ul>"},{"location":"developer/#step-3-clone-the-repository","title":"Step 3: Clone the repository","text":"<p>Use Git to clone the repository:</p> <pre><code>git clone git@github.com:kantord/SeaGOAT.git\ncd SeaGOAT\n</code></pre>"},{"location":"developer/#step-4-run-poetry-install","title":"Step 4: Run <code>poetry install</code>","text":"<p>Poetry is used to manage dependencies in this project. Poetry also manages virtualenvs automatically.</p> <p>If you have Poetry installed correctly, automatically setting up a virtualenv and installing all dependencies is as easy as running:</p> <pre><code>poetry install\n</code></pre>"},{"location":"developer/#step-5-run-tests","title":"Step 5: Run tests","text":"<p>To make sure that your development environment was set up correctly, run tests:</p> <pre><code>poetry run pytest\n</code></pre> <p>If all tests pass, you have set up your development environment correctly.</p>"},{"location":"developer/#step-6-optional-set-up-pre-commit-hooks","title":"Step 6: (Optional) Set up pre-commit hooks","text":"<p>There are several tools in use in SeaGOAT to make sure that code is ready to merge. Some of these tools will automatically fix issues with the code, such as reformatting the code to enforce code style. Other tools will merely point out issues before you commit your code.</p> <p>It is recommended to set up pre-commit hooks so that these checks are executed automatically. You can do so by running this command:</p> <pre><code>poetry run pre-commit install\n</code></pre> <p>If you do not wish to use pre-commit hooks, you can still execute all checks manually by running:</p> <pre><code>poetry run pre-commit run --all-files\n</code></pre>"},{"location":"developer/#developing-seagoat","title":"Developing SeaGOAT","text":""},{"location":"developer/#automated-testing","title":"Automated testing","text":"<p>Automated testing is done using <code>pytest</code>. Here are some example use cases:</p>"},{"location":"developer/#watch-mode","title":"Watch mode","text":"<p>Automatically runs tests for all files when you save your changes:</p> <pre><code>poetry run ptw\n</code></pre>"},{"location":"developer/#test-changed-files","title":"Test changed files","text":"<pre><code>poetry run pytest . --testmon\n</code></pre>"},{"location":"developer/#test-all-files","title":"Test all files","text":"<pre><code>poetry run pytest .\n</code></pre>"},{"location":"developer/#snapshot-testing","title":"Snapshot testing","text":"<p>Snapshot testing is used in a few test cases. You can update snapshots by running</p> <pre><code>poetry run pytest  --snapshot-update\n</code></pre>"},{"location":"developer/#manual-testing","title":"Manual testing","text":"<p>In order to test your local changes to SeaGOAT manually, you can prefix the command by <code>poetry run</code>. For example to run your local version of <code>seagoat-server</code>, just run:</p> <pre><code>poetry run seagoat-server\n</code></pre> <p>Similarly, to run your local version of <code>gt</code>/<code>seagoat</code>, you can run:</p> <pre><code>poetry run gt\n</code></pre> <p>You can run an <code>ipython</code> in the correct virtualenv also by prefixing it with <code>poetry run</code>:</p> <pre><code>poetry run ipython\n</code></pre>"},{"location":"developer/#automatic-checks-linting-and-automatic-formatting","title":"Automatic checks (linting) and automatic formatting","text":"<p>This repository uses <code>pre-commit</code> to run automatic checks and fixes on the codebase in addition to automatic and manual testing.</p> <p>If you have set up commit hooks (recommended), then these checks and fixes are automatically executed each time you attempt to make a commit.</p> <p>If you don't like commit hooks, or if you want to run the checks for all files, not just changed files then you can run the following command:</p> <pre><code>pre-commit run --all-files\n</code></pre>"},{"location":"developer/#contributing-to-seagoat","title":"Contributing to SeaGOAT","text":"<p>Welcome to SeaGOAT!</p> <p>We value your contributions and ask you to please adhere to our Code of Conduct and follow these brief guidelines.</p>"},{"location":"developer/#getting-started","title":"Getting Started","text":"<ul> <li>Follow the   guide on how set up the development environment</li> <li>Look for issues labeled   <code>up for grabs</code>   or   <code>good first issue</code>   as starting points.</li> <li>Report bugs or suggest enhancements by   creating an issue   with the <code>bug</code> or <code>enhancement</code> label.</li> </ul>"},{"location":"developer/#contribution-process","title":"Contribution Process","text":"<ol> <li>Fork &amp; Create a Branch: Fork the repo    and create a branch with a descriptive name in your fork.</li> <li>Develop &amp; Test Changes: Make and test your changes, adhering to existing    coding standards. If you have configured your development environment    correctly, automated tools will help you with this.</li> <li>Submit a Pull Request: Open a Pull Request    targeting the <code>main</code> branch of the original repo.</li> <li>Address Review Comments: After you submitted a pull request, it will    be reviewed by a maintainer as soon as possible. In order to make sure    your changes get merged, you have to address any comments in your pull    request until it is finally approved. After your changes are approved and    merged, they will be released automatically if there are any user facing    changes.</li> </ol> <p>By contributing to SeaGOAT you agree to release your contributions under the same license SeaGOAT is licensed to, including future relicensing or double licensing of the codebase</p>"},{"location":"server/","title":"SeaGOAT Server","text":""},{"location":"server/#seagoat-server","title":"SeaGOAT-server","text":"<p>The <code>seagoat-server</code> is an integral component of the Seagoat command-line tool designed to analyze your codebase and create vector embeddings for it.</p> <p>While it serves as a backend for the command-line tool, also allows you to use it through HTTP to build your own SeaGOAT-based applications.</p>"},{"location":"server/#starting-the-server","title":"Starting the server","text":"<p>To boot up the server for a specific repository, use:</p> <pre><code>seagoat-server start &lt;repo_path&gt; [--port=&lt;custom_port&gt;]\n</code></pre> <ul> <li><code>repo_path</code> - Path to your Git repository.</li> <li><code>--port</code> - (Optional) Run the server on a specific port.</li> </ul> <p>If you don't specify a custom port, a random port will be assigned to your server. Don't worry, SeaGOAT will still be able to automatically find the server corresponding to a specific repository.</p>"},{"location":"server/#developing-with-seagoat-server","title":"Developing with SeaGOAT-server","text":"<p>SeaGOAT-server not only serves as a backend for the SeaGOAT command-line tool but also offers developers the capability to integrate its functions to build custom applications.</p>"},{"location":"server/#retrieving-server-information","title":"Retrieving server information","text":"<p>As SeaGOAT servers only run on one repository at a time, there is a command provided in order to gather information about all running servers, including how to access them through HTTP.</p> <p>To get detailed information about all active SeaGOAT servers in JSON format, you can utilize the <code>server-info</code> command:</p> <pre><code>seagoat-server server-info\n</code></pre> <p>You will receive a response similar to this:</p> <pre><code>{\n    \"version\": \"0.5.3\",\n    \"globalCache\": \"/home/myuser/.cache/seagoat\",\n    \"globalConfigFile\": \"/home/myuser/.config/seagoat/config.yml\",\n    \"servers\": {\n        \"/path/to/repository/1\": {\n            \"cacheLocation\": {\n              \"chroma\": \"/home/myuser/.cache/seagoat/bfe8133b9e871ea1c8498a0\"\n            },\n            \"isRunning\": true,\n            \"host\": \"127.0.0.1\",\n            \"port\": \"8080\",\n            \"address\": \"http://127.0.0.1:8080\"\n        },\n        \"/path/to/repository/2\": {\n            \"cacheLocation\": {\n              \"chroma\": \"/home/myuser/.cache/seagoat/fbee39c83bd47a75e2f839\"\n            },\n            \"isRunning\": false,\n            \"host\": \"127.0.0.1\",\n            \"port\": \"8081\",\n            \"address\": \"http://127.0.0.1:8081\"\n        }\n    }\n}\n</code></pre> <p>In this output, you can also see information about where databases/caches related to your projects are stored. <code>globalCache</code> is the parent folder of all the cache directories, and within each server, you can find an attribute called <code>cacheLocation</code> which contains the path to the cache directory for each different type of cache associated with that project.</p> <p>If you want to create a configuration file, you can see the path for it in the <code>globalConfigFile</code> attribute. This depends on your operating system. You can also create a configuration file for your project. See the configuration documentation for more information.</p>"},{"location":"server/#querying-code-lines-using-the-api","title":"Querying code lines using the API","text":"<p>If you want to build an application using SeaGOAT-server, first you need to figure out the address of the server you want to connect to.</p> <p>To find the address of each SeaGOAT-server running on your computer, use <code>seagoat-server server-info</code>. See the explanation above.</p> <p>Example query</p> <p>Once you have the address, you can start making queries to it. For instance, this is how you'd make a query using <code>curl</code> to the server running on <code>http://localhost:32835</code>:</p> <pre><code>curl -X POST 'http://localhost:34743/lines/query' \\\n-H 'Content-Type: application/json' \\\n-d '{\n      \"queryText\": \"your_query_here\",\n      \"limitClue\": \"500\",\n      \"contextAbove\": 3,\n      \"contextBelow\": 3\n    }'\n</code></pre> <p>Payload structure</p> <ul> <li><code>queryText</code> - The actual text of your query.</li> <li><code>limitClue</code> - This number should indicate how many results you are planning to display. This is not a hard limit, you might receive more data than what you asked for. Nevertheless, you might not receive enough results if your limit clue is low.</li> <li><code>contextAbove</code> - Number of context lines above each result line</li> <li><code>contextBelow</code> - Number of context lines below each result line</li> </ul> <p>Example response</p> <p>You will receive a response similar to this one:</p> <pre><code>{\n  \"results\": [\n    {\n      \"path\": \"tests/conftest.py\",\n      \"fullPath\": \"/home/user/repos/SeaGOAT/tests/conftest.py\",\n      \"score\": 0.6,\n      \"blocks\": [\n        {\n          \"score\": 0.21,\n          \"lines\": [\n            {\n              \"score\": 0.21,\n              \"line\": 100,\n              \"lineText\": \"def very_relevant_function():\",\n              \"resultTypes\": [\n                \"result\"\n              ]\n            }\n          ],\n          \"lineTypeCount\": {\n            \"result\": 1\n          }\n        },\n        {\n          \"score\": 0.6,\n          \"lines\": [\n            {\n              \"score\": 0.6,\n              \"line\": 489,\n              \"lineText\": \" contents=(\\\"hello()\\\\n\\\" * (i % 50)),\",\n              \"resultTypes\": [\n                \"result\"\n              ]\n            },\n            {\n              \"score\": 0.84,\n              \"line\": 490,\n              \"lineText\": \"     return foo * bar\",\n              \"resultTypes\": [\n                \"result\"\n              ]\n            }\n          ],\n          \"lineTypeCount\": {\n            \"result\": 1\n          }\n        }\n      ]\n    },\n    {\n      \"path\": \"tests/test_cli.py\",\n      \"fullPath\": \"/home/user/repos/SeaGOAT/tests/test_cli.py\",\n      \"score\": 0.87,\n      \"blocks\": [... etc ... ]\n    },\n    ... etc ...\n  ],\n  \"version\": \"0.26.0\"\n}\n</code></pre> <p>Understanding the response</p> <p>The response contains the following information:</p> <ul> <li><code>version</code> - This is the version of SeaGOAT being used.</li> <li><code>results</code> - This is an array containing your results.</li> </ul> <p>Each result inside results has the following data:</p> <ul> <li><code>path</code> - The (relative) path of the file within the repository.</li> <li><code>fullPath</code> - The absolute path to the file in your filesystem.</li> <li><code>score</code> - A number indicating how relevant a result is, smaller is better.</li> <li><code>blocks</code> - An array of relevant code blocks from this file.</li> </ul> <p>Within each block you will find:</p> <ul> <li><code>lines</code> - An array of line objects containing:</li> <li><code>score</code> - Relevance score for this line. See <code>score</code> above.</li> <li><code>line</code> - The line number in the file where the result was found.</li> <li><code>lineText</code> - The actual text content of that line.</li> <li><code>resultTypes</code> - An array indicating all types of result on this line:<ul> <li><code>\"result\"</code> Means that the line is directly relevant to the query.</li> <li><code>\"context\"</code> Means that the line was added as a context line.</li> <li><code>\"bridge\"</code> It is a type of context line that is added within a block rather than around it. It is used to merge code blocks when they are nearly touching.</li> </ul> </li> <li><code>lineTypeCount</code> - An object containing a count of all line types within   the code block. See <code>resultTypes</code> for more.</li> <li><code>score</code> - A score for the code block overall.</li> </ul>"},{"location":"server/#querying-code-files-using-the-api","title":"Querying code files using the API","text":"<p>There is another endpoint that is specifically designed to find code files instead of finding specific lines or code blocks.</p> <p>Example query</p> <p>Once you have the address, you can start making queries to it. For instance, this is how you'd make a query using <code>curl</code> to the server running on <code>http://localhost:32835</code>:</p> <pre><code>curl -X POST 'http://localhost:34743/files/query' \\\n-H 'Content-Type: application/json' \\\n-d '{\n  \"queryText\": \"your_query_here\",\n  \"limitClue\": \"500\",\n}'\n</code></pre> <p>Payload structure</p> <ul> <li><code>queryText</code> - The actual text of your query.</li> <li><code>limitClue</code> - This number should indicate how many results you are planning to display. This is not a hard limit, you might receive more data than what you asked for. Nevertheless, you might not receive enough results if your limit clue is low. When querying files instead of lines, the limit clue is more tricky because the limit is still expressed in number of lines, but the results are files.</li> </ul> <p>Example response</p> <p>You will receive a response similar to this one:</p> <pre><code>{\n    \"results\": [\n        {\n            \"fullPath\": \"tests/conftest.py\",\n            \"path\": \"tests/conftest.py\"\n        },\n        {\n            \"fullPath\": \"tests/test_cli.py\",\n            \"path\": \"tests/test_cli.py\"\n        },\n        {\n            \"fullPath\": \"tests/test_result.py\",\n            \"path\": \"tests/test_result.py\"\n        },\n        {\n            \"fullPath\": \"tests/test_file.py\",\n            \"path\": \"tests/test_file.py\"\n        },\n        {\n            \"fullPath\": \"tests/test_repository.py\",\n            \"path\": \"tests/test_repository.py\"\n        },\n        {\n            \"fullPath\": \"tests/test_source_ripgrep.py\",\n            \"path\": \"tests/test_source_ripgrep.py\"\n        },\n        {\n            \"fullPath\": \"docs/server.md\",\n            \"path\": \"docs/server.md\"\n        }\n    ],\n    \"version\": \"0.43.0\"\n}\n</code></pre>"},{"location":"usage/","title":"Usage Reference","text":""},{"location":"usage/#usage","title":"Usage","text":"<p>SeaGOAT is a command-line tool designed to assist in querying your codebase. By using technologies such as ChromaDB and ripgrep, it goes beyond direct match searches and uses semantic meaning to quickly find details related to your query.</p> <p>Only works with Git</p> <p>SeaGOAT takes your Git history into account in order to provide the most useful and relevant results.</p>"},{"location":"usage/#command-usage","title":"Command Usage","text":"<pre><code>seagoat &lt;query&gt; [repo_path] [OPTIONS]\n</code></pre> <p>Note</p> <p>The seagoat CLI queries the SeaGOAT server. If the server is not running, you would be prompted to start the server using <code>seagoat-server start {repo_path} command</code>.</p>"},{"location":"usage/#arguments","title":"Arguments","text":"<ul> <li><code>query</code>: This is a required argument. It is the query to be made to the SeaGOAT server.</li> <li><code>repo_path</code>: This argument is optional, and defaults to the current working directory. It represents the path to the code repository.</li> </ul>"},{"location":"usage/#examples","title":"Examples","text":""},{"location":"usage/#query-current-folder","title":"Query current folder","text":"<pre><code>seagoat \"myQuery\"\n</code></pre>"},{"location":"usage/#query-specific-folder","title":"Query specific folder","text":"<pre><code>seagoat \"myQuery\" \"/path/to/my/repo\"\n</code></pre>"},{"location":"usage/#using-regular-expressions","title":"Using Regular Expressions","text":"<p>One of SeaGOAT's most powerful features is the ability to combine regular expressions with AI-driven vector queries. This synergistic approach narrows down your codebase search using pattern-based regular expressions while leveraging AI to understand the semantic meaning behind your query.</p> <pre><code>seagoat \"function db_.* that initializes database\"\n</code></pre>"},{"location":"usage/#options","title":"Options","text":""},{"location":"usage/#-no-color-disable-syntax-highlighting","title":"<code>--no-color</code>: Disable syntax highlighting","text":"<p>This is automatically enabled when used as part of a bash pipeline.</p> Example<pre><code>seagoat \"myQuery\" --no-color\n</code></pre>"},{"location":"usage/#-l-max-results-limit-number-of-result-lines","title":"<code>-l, --max-results</code>: Limit number of result lines","text":"<p>This limits the number of result lines displayed. Useful if you only care about the best results.</p> Example<pre><code>seagoat \"myQuery\" --max-results=5\n</code></pre> <p>SeaGOAT is oriented around code blocks, not individual lines</p> <p>In SeaGOAT, code is displayed in full, continous blocks rather than individual lines. It'll always show at least one full block, even if your limit is 0.</p> <p>If you set a limit, SeaGOAT ensures that complete blocks are shown as long as they fit in your limit. For example, with a 5-line limit, it can show a 3-line and a 2-line block, but not two 3-line blocks.</p> <p>Also, this limit only counts the actual code, not any extra context lines you might request.</p>"},{"location":"usage/#-version-print-version-number","title":"<code>--version</code>: Print version number","text":"<p>This prints the version of your current SeaGOAT installation.</p>"},{"location":"usage/#-b-context-above-lines-of-context-before-each-result","title":"<code>-B, --context-above</code>: Lines of context before each result","text":"<p>This option allows you to include a specified number of lines of context before each matching result.</p> <p>Tricky context lines</p> <p>Context lines are lines that are added because they are adjacent to a result line.</p> <p>That being said, because lines are grouped into chunks of 3, results based on vector embeddings might already contain lines that might not be strictly related to the query.</p> <p>This might make it appear like there are more context lines than you requested. Consider this when deciding how many context lines to include.</p> Example<pre><code>seagoat \"myQuery\" --context-above=5\n</code></pre>"},{"location":"usage/#-a-context-below-lines-of-context-after-each-result","title":"<code>-A, --context-below</code>: Lines of context after each result","text":"<p>This option allows you to include a specified number of lines of context after each matching result.</p> Example<pre><code>seagoat \"myQuery\" --context-below=5\n</code></pre> <p>Tricky context lines</p> <p>Context lines are lines that are added because they are adjacent to a result line.</p> <p>That being said, because lines are grouped into chunks of 3, results based on vector embeddings might already contain lines that might not be strictly related to the query.</p> <p>This might make it appear like there are more context lines than you requested. Consider this when deciding how many context lines to include.</p>"},{"location":"usage/#-c-context-lines-of-context-both-before-and-after-each-result","title":"<code>-C, --context</code>: Lines of context both before and after each result","text":"<p>This option sets both <code>--context-above</code> and <code>--context-below</code> to the same specified value. This is useful if you want an equal amount of context around each matching result.</p> Example<pre><code>seagoat \"myQuery\" --context=5\n</code></pre> <p>Tricky context lines</p> <p>Context lines are lines that are added because they are adjacent to a result line.</p> <p>That being said, because lines are grouped into chunks of 3, results based on vector embeddings might already contain lines that might not be strictly related to the query.</p> <p>This might make it appear like there are more context lines than you requested. Consider this when deciding how many context lines to include.</p>"}]}