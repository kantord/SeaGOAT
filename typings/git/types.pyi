"""
This type stub file was generated by pyright.
"""

import sys
from typing import (
    Any,
    Dict,
    Literal,
    NoReturn,
    Protocol,
    TYPE_CHECKING,
    Tuple,
    TypeVar,
    TypedDict,
    Union,
    runtime_checkable,
)
from typing_extensions import Literal, Protocol, TypedDict, runtime_checkable
from git.repo import Repo

if sys.version_info[:2] >= (3, 8): ...
else: ...
if sys.version_info[:2] < (3, 9):
    PathLike = ...
else:
    PathLike = ...
if TYPE_CHECKING: ...
TBD = Any
_T = TypeVar("_T")
Tree_ish = Union["Commit", "Tree"]
Commit_ish = Union["Commit", "TagObject", "Blob", "Tree"]
Lit_commit_ish = Literal["commit", "tag", "blob", "tree"]
Lit_config_levels = Literal["system", "global", "user", "repository"]
ConfigLevels_Tup = Tuple[
    Literal["system"], Literal["user"], Literal["global"], Literal["repository"]
]

def assert_never(
    inp: NoReturn, raise_error: bool = ..., exc: Union[Exception, None] = ...
) -> None:
    """For use in exhaustive checking of literal or Enum in if/else chain.
    Should only be reached if all members not handled OR attempt to pass non-members through chain.

    If all members handled, type is Empty. Otherwise, will cause mypy error.
    If non-members given, should cause mypy error at variable creation.

    If raise_error is True, will also raise AssertionError or the Exception passed to exc.
    """
    ...

class Files_TD(TypedDict):
    insertions: int
    deletions: int
    lines: int
    ...

class Total_TD(TypedDict):
    insertions: int
    deletions: int
    lines: int
    files: int
    ...

class HSH_TD(TypedDict):
    total: Total_TD
    files: Dict[PathLike, Files_TD]
    ...

@runtime_checkable
class Has_Repo(Protocol):
    repo: Repo
    ...

@runtime_checkable
class Has_id_attribute(Protocol):
    _id_attribute_: str
    ...
