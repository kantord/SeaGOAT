"""
This type stub file was generated by pyright.
"""

from .reference import Reference
from typing import Any, TYPE_CHECKING, Type, Union
from git.types import Commit_ish, PathLike
from git.repo import Repo
from git.objects import Commit, TagObject
from git.refs import SymbolicReference

__all__ = ["TagReference", "Tag"]
if TYPE_CHECKING: ...

class TagReference(Reference):
    """Class representing a lightweight tag reference which either points to a commit
    ,a tag object or any other object. In the latter case additional information,
    like the signature or the tag-creator, is available.

    This tag object will always point to a commit object, but may carry additional
    information in a tag object::

     tagref = TagReference.list_items(repo)[0]
     print(tagref.commit.message)
     if tagref.tag is not None:
        print(tagref.tag.message)"""

    __slots__ = ...
    _common_default = ...
    _common_path_default = ...
    @property
    def commit(self) -> Commit:
        """:return: Commit object the tag ref points to

        :raise ValueError: if the tag points to a tree or blob"""
        ...
    @property
    def tag(self) -> Union[TagObject, None]:
        """
        :return: Tag object this tag ref points to or None in case
            we are a light weight tag"""
        ...
    @property
    def object(self) -> Commit_ish: ...
    @classmethod
    def create(
        cls: Type[TagReference],
        repo: Repo,
        path: PathLike,
        reference: Union[str, SymbolicReference] = ...,
        logmsg: Union[str, None] = ...,
        force: bool = ...,
        **kwargs: Any
    ) -> TagReference:
        """Create a new tag reference.

        :param path:
            The name of the tag, i.e. 1.0 or releases/1.0.
            The prefix refs/tags is implied

        :param ref:
            A reference to the Object you want to tag. The Object can be a commit, tree or
            blob.

        :param logmsg:
            If not None, the message will be used in your tag object. This will also
            create an additional tag object that allows to obtain that information, i.e.::

                tagref.tag.message

        :param message:
            Synonym for :param logmsg:
            Included for backwards compatibility. :param logmsg is used in preference if both given.

        :param force:
            If True, to force creation of a tag even though that tag already exists.

        :param kwargs:
            Additional keyword arguments to be passed to git-tag

        :return: A new TagReference"""
        ...
    @classmethod
    def delete(cls, repo: Repo, *tags: TagReference) -> None:
        """Delete the given existing tag or tags"""
        ...

Tag = TagReference
