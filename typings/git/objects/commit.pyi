"""
This type stub file was generated by pyright.
"""

import datetime
from git.util import Actor, Stats
from git.diff import Diffable
from .tree import Tree
from . import base
from .util import Serializable, TraversableIterableObj
from typing import Any, Dict, Iterator, List, Sequence, TYPE_CHECKING, Union
from git.types import Literal, PathLike
from git.repo import Repo
from git.refs import SymbolicReference

if TYPE_CHECKING: ...
log = ...
__all__ = ("Commit",)

class Commit(base.Object, TraversableIterableObj, Diffable, Serializable):
    """Wraps a git Commit object.

    This class will act lazily on some of its attributes and will query the
    value on demand only if it involves calling the git binary."""

    env_author_date = ...
    env_committer_date = ...
    conf_encoding = ...
    default_encoding = ...
    type: Literal[commit] = ...
    __slots__ = ...
    _id_attribute_ = ...
    def __init__(
        self,
        repo: Repo,
        binsha: bytes,
        tree: Union[Tree, None] = ...,
        author: Union[Actor, None] = ...,
        authored_date: Union[int, None] = ...,
        author_tz_offset: Union[None, float] = ...,
        committer: Union[Actor, None] = ...,
        committed_date: Union[int, None] = ...,
        committer_tz_offset: Union[None, float] = ...,
        message: Union[str, bytes, None] = ...,
        parents: Union[Sequence[Commit], None] = ...,
        encoding: Union[str, None] = ...,
        gpgsig: Union[str, None] = ...,
    ) -> None:
        """Instantiate a new Commit. All keyword arguments taking None as default will
        be implicitly set on first query.

        :param binsha: 20 byte sha1
        :param parents: tuple( Commit, ... )
            is a tuple of commit ids or actual Commits
        :param tree: Tree object
        :param author: Actor
            is the author Actor object
        :param authored_date: int_seconds_since_epoch
            is the authored DateTime - use time.gmtime() to convert it into a
            different format
        :param author_tz_offset: int_seconds_west_of_utc
            is the timezone that the authored_date is in
        :param committer: Actor
            is the committer string
        :param committed_date: int_seconds_since_epoch
            is the committed DateTime - use time.gmtime() to convert it into a
            different format
        :param committer_tz_offset: int_seconds_west_of_utc
            is the timezone that the committed_date is in
        :param message: string
            is the commit message
        :param encoding: string
            encoding of the message, defaults to UTF-8
        :param parents:
            List or tuple of Commit objects which are our parent(s) in the commit
            dependency graph
        :return: git.Commit

        :note:
            Timezone information is in the same format and in the same sign
            as what time.altzone returns. The sign is inverted compared to git's
            UTC timezone."""
        ...
    def replace(self, **kwargs: Any) -> Commit:
        """Create new commit object from existing commit object.

        Any values provided as keyword arguments will replace the
        corresponding attribute in the new object.
        """
        ...
    @property
    def authored_datetime(self) -> datetime.datetime: ...
    @property
    def committed_datetime(self) -> datetime.datetime: ...
    @property
    def summary(self) -> Union[str, bytes]:
        """:return: First line of the commit message"""
        ...
    def count(
        self, paths: Union[PathLike, Sequence[PathLike]] = ..., **kwargs: Any
    ) -> int:
        """Count the number of commits reachable from this commit

        :param paths:
            is an optional path or a list of paths restricting the return value
            to commits actually containing the paths

        :param kwargs:
            Additional options to be passed to git-rev-list. They must not alter
            the output style of the command, or parsing will yield incorrect results
        :return: int defining the number of reachable commits"""
        ...
    @property
    def name_rev(self) -> str:
        """
        :return:
            String describing the commits hex sha based on the closest Reference.
            Mostly useful for UI purposes"""
        ...
    @classmethod
    def iter_items(
        cls,
        repo: Repo,
        rev: Union[str, Commit, SymbolicReference],
        paths: Union[PathLike, Sequence[PathLike]] = ...,
        **kwargs: Any
    ) -> Iterator[Commit]:
        """Find all commits matching the given criteria.

        :param repo: is the Repo
        :param rev: revision specifier, see git-rev-parse for viable options
        :param paths:
            is an optional path or list of paths, if set only Commits that include the path
            or paths will be considered
        :param kwargs:
            optional keyword arguments to git rev-list where
            ``max_count`` is the maximum number of commits to fetch
            ``skip`` is the number of commits to skip
            ``since`` all commits since i.e. '1970-01-01'
        :return: iterator yielding Commit items"""
        ...
    def iter_parents(
        self, paths: Union[PathLike, Sequence[PathLike]] = ..., **kwargs: Any
    ) -> Iterator[Commit]:
        """Iterate _all_ parents of this commit.

        :param paths:
            Optional path or list of paths limiting the Commits to those that
            contain at least one of the paths
        :param kwargs: All arguments allowed by git-rev-list
        :return: Iterator yielding Commit objects which are parents of self"""
        ...
    @property
    def stats(self) -> Stats:
        """Create a git stat from changes between this commit and its first parent
        or from all changes done if this is the very first commit.

        :return: git.Stats"""
        ...
    @property
    def trailers(self) -> Dict:
        """Get the trailers of the message as dictionary

        Git messages can contain trailer information that are similar to RFC 822
        e-mail headers (see: https://git-scm.com/docs/git-interpret-trailers).

        This functions calls ``git interpret-trailers --parse`` onto the message
        to extract the trailer information. The key value pairs are stripped of
        leading and trailing whitespaces before they get saved into a dictionary.

        Valid message with trailer:

        .. code-block::

            Subject line

            some body information

            another information

            key1: value1
            key2 :    value 2 with inner spaces

        dictionary will look like this:

        .. code-block::

            {
                "key1": "value1",
                "key2": "value 2 with inner spaces"
            }

        :return: Dictionary containing whitespace stripped trailer information

        """
        ...
    @classmethod
    def create_from_tree(
        cls,
        repo: Repo,
        tree: Union[Tree, str],
        message: str,
        parent_commits: Union[None, List[Commit]] = ...,
        head: bool = ...,
        author: Union[None, Actor] = ...,
        committer: Union[None, Actor] = ...,
        author_date: Union[None, str, datetime.datetime] = ...,
        commit_date: Union[None, str, datetime.datetime] = ...,
    ) -> Commit:
        """Commit the given tree, creating a commit object.

        :param repo: Repo object the commit should be part of
        :param tree: Tree object or hex or bin sha
            the tree of the new commit
        :param message: Commit message. It may be an empty string if no message is provided.
            It will be converted to a string , in any case.
        :param parent_commits:
            Optional Commit objects to use as parents for the new commit.
            If empty list, the commit will have no parents at all and become
            a root commit.
            If None , the current head commit will be the parent of the
            new commit object
        :param head:
            If True, the HEAD will be advanced to the new commit automatically.
            Else the HEAD will remain pointing on the previous commit. This could
            lead to undesired results when diffing files.
        :param author: The name of the author, optional. If unset, the repository
            configuration is used to obtain this value.
        :param committer: The name of the committer, optional. If unset, the
            repository configuration is used to obtain this value.
        :param author_date: The timestamp for the author field
        :param commit_date: The timestamp for the committer field

        :return: Commit object representing the new commit

        :note:
            Additional information about the committer and Author are taken from the
            environment or from the git configuration, see git-commit-tree for
            more information"""
        ...
    @property
    def co_authors(self) -> List[Actor]:
        """
        Search the commit message for any co-authors of this commit.
        Details on co-authors: https://github.blog/2018-01-29-commit-together-with-co-authors/

        :return: List of co-authors for this commit (as Actor objects).
        """
        ...
