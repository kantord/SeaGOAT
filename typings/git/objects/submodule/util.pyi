"""
This type stub file was generated by pyright.
"""

from git.config import GitConfigParser
from typing import Any, Sequence, TYPE_CHECKING
from git.types import PathLike
from .base import Submodule
from git.repo import Repo
from git.refs import Head, RemoteReference
from git import Remote

if TYPE_CHECKING: ...
__all__ = (
    "sm_section",
    "sm_name",
    "mkhead",
    "find_first_remote_branch",
    "SubmoduleConfigParser",
)

def sm_section(name: str) -> str:
    """:return: section title used in .gitmodules configuration file"""
    ...

def sm_name(section: str) -> str:
    """:return: name of the submodule as parsed from the section name"""
    ...

def mkhead(repo: Repo, path: PathLike) -> Head:
    """:return: New branch/head instance"""
    ...

def find_first_remote_branch(
    remotes: Sequence[Remote], branch_name: str
) -> RemoteReference:
    """Find the remote branch matching the name of the given branch or raise InvalidGitRepositoryError"""
    ...

class SubmoduleConfigParser(GitConfigParser):
    """
    Catches calls to _write, and updates the .gitmodules blob in the index
    with the new data, if we have written into a stream. Otherwise it will
    add the local file to the index to make it correspond with the working tree.
    Additionally, the cache must be cleared

    Please note that no mutating method will work in bare mode
    """

    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def set_submodule(self, submodule: Submodule) -> None:
        """Set this instance's submodule. It must be called before
        the first write operation begins"""
        ...
    def flush_to_index(self) -> None:
        """Flush changes in our configuration file to the index"""
        ...
    def write(self) -> None: ...
