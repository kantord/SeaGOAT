"""
This type stub file was generated by pyright.
"""

from typing import List, Sequence, TYPE_CHECKING, Tuple, Union
from git.types import PathLike
from git.repo.base import Repo

""" Module containing all exceptions thrown throughout the git package, """
if TYPE_CHECKING: ...

class GitError(Exception):
    """Base class for all package exceptions"""

    ...

class InvalidGitRepositoryError(GitError):
    """Thrown if the given repository appears to have an invalid format."""

    ...

class WorkTreeRepositoryUnsupported(InvalidGitRepositoryError):
    """Thrown to indicate we can't handle work tree repositories"""

    ...

class NoSuchPathError(GitError, OSError):
    """Thrown if a path could not be access by the system."""

    ...

class UnsafeProtocolError(GitError):
    """Thrown if unsafe protocols are passed without being explicitly allowed."""

    ...

class UnsafeOptionError(GitError):
    """Thrown if unsafe options are passed without being explicitly allowed."""

    ...

class CommandError(GitError):
    """Base class for exceptions thrown at every stage of `Popen()` execution.

    :param command:
        A non-empty list of argv comprising the command-line.
    """

    _msg = ...
    def __init__(
        self,
        command: Union[List[str], Tuple[str, ...], str],
        status: Union[str, int, None, Exception] = ...,
        stderr: Union[bytes, str, None] = ...,
        stdout: Union[bytes, str, None] = ...,
    ) -> None: ...
    def __str__(self) -> str: ...

class GitCommandNotFound(CommandError):
    """Thrown if we cannot find the `git` executable in the PATH or at the path given by
    the GIT_PYTHON_GIT_EXECUTABLE environment variable"""

    def __init__(
        self, command: Union[List[str], Tuple[str], str], cause: Union[str, Exception]
    ) -> None: ...

class GitCommandError(CommandError):
    """Thrown if execution of the git command fails with non-zero status code."""

    def __init__(
        self,
        command: Union[List[str], Tuple[str, ...], str],
        status: Union[str, int, None, Exception] = ...,
        stderr: Union[bytes, str, None] = ...,
        stdout: Union[bytes, str, None] = ...,
    ) -> None: ...

class CheckoutError(GitError):
    """Thrown if a file could not be checked out from the index as it contained
    changes.

    The .failed_files attribute contains a list of relative paths that failed
    to be checked out as they contained changes that did not exist in the index.

    The .failed_reasons attribute contains a string informing about the actual
    cause of the issue.

    The .valid_files attribute contains a list of relative paths to files that
    were checked out successfully and hence match the version stored in the
    index"""

    def __init__(
        self,
        message: str,
        failed_files: Sequence[PathLike],
        valid_files: Sequence[PathLike],
        failed_reasons: List[str],
    ) -> None: ...
    def __str__(self) -> str: ...

class CacheError(GitError):
    """Base for all errors related to the git index, which is called cache internally"""

    ...

class UnmergedEntriesError(CacheError):
    """Thrown if an operation cannot proceed as there are still unmerged
    entries in the cache"""

    ...

class HookExecutionError(CommandError):
    """Thrown if a hook exits with a non-zero exit code. It provides access to the exit code and the string returned
    via standard output"""

    def __init__(
        self,
        command: Union[List[str], Tuple[str, ...], str],
        status: Union[str, int, None, Exception],
        stderr: Union[bytes, str, None] = ...,
        stdout: Union[bytes, str, None] = ...,
    ) -> None: ...

class RepositoryDirtyError(GitError):
    """Thrown whenever an operation on a repository fails as it has uncommitted changes that would be overwritten"""

    def __init__(self, repo: Repo, message: str) -> None: ...
    def __str__(self) -> str: ...
