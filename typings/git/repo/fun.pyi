"""
This type stub file was generated by pyright.
"""

from git.objects import Blob, Commit, Object, TagObject, Tree
from git.refs import SymbolicReference
from typing import Optional, TYPE_CHECKING, Union
from git.types import PathLike
from .base import Repo
from git.db import GitCmdObjectDB
from git.refs.tag import Tag

"""Package with general repository related functions"""
if TYPE_CHECKING: ...
__all__ = (
    "rev_parse",
    "is_git_dir",
    "touch",
    "find_submodule_git_dir",
    "name_to_object",
    "short_to_long",
    "deref_tag",
    "to_commit",
    "find_worktree_git_dir",
)

def touch(filename: str) -> str: ...
def is_git_dir(d: PathLike) -> bool:
    """This is taken from the git setup.c:is_git_directory
    function.

    @throws WorkTreeRepositoryUnsupported if it sees a worktree directory. It's quite hacky to do that here,
            but at least clearly indicates that we don't support it.
            There is the unlikely danger to throw if we see directories which just look like a worktree dir,
            but are none."""
    ...

def find_worktree_git_dir(dotgit: PathLike) -> Optional[str]:
    """Search for a gitdir for this worktree."""
    ...

def find_submodule_git_dir(d: PathLike) -> Optional[PathLike]:
    """Search for a submodule repo."""
    ...

def short_to_long(odb: GitCmdObjectDB, hexsha: str) -> Optional[bytes]:
    """:return: long hexadecimal sha1 from the given less-than-40 byte hexsha
        or None if no candidate could be found.
    :param hexsha: hexsha with less than 40 byte"""
    ...

def name_to_object(
    repo: Repo, name: str, return_ref: bool = ...
) -> Union[SymbolicReference, Commit, TagObject, Blob, Tree]:
    """
    :return: object specified by the given name, hexshas ( short and long )
        as well as references are supported
    :param return_ref: if name specifies a reference, we will return the reference
        instead of the object. Otherwise it will raise BadObject or BadName
    """
    ...

def deref_tag(tag: Tag) -> TagObject:
    """Recursively dereference a tag and return the resulting object"""
    ...

def to_commit(obj: Object) -> Union[Commit, TagObject]:
    """Convert the given object to a commit if possible and return it"""
    ...

def rev_parse(repo: Repo, rev: str) -> Union[Commit, Tag, Tree, Blob]:
    """
    :return: Object at the given revision, either Commit, Tag, Tree or Blob
    :param rev: git-rev-parse compatible revision specification as string, please see
        http://www.kernel.org/pub/software/scm/git/docs/git-rev-parse.html
        for details
    :raise BadObject: if the given revision could not be found
    :raise ValueError: If rev couldn't be parsed
    :raise IndexError: If invalid reflog index is specified"""
    ...
