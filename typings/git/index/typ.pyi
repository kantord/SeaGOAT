"""
This type stub file was generated by pyright.
"""

from git.objects import Blob
from typing import NamedTuple, Sequence, TYPE_CHECKING, Tuple, Union
from git.types import PathLike
from git.repo import Repo

"""Module with additional types used by the index"""
if TYPE_CHECKING: ...
StageType = int
__all__ = ("BlobFilter", "BaseIndexEntry", "IndexEntry", "StageType")
CE_NAMEMASK = ...
CE_STAGEMASK = ...
CE_EXTENDED = ...
CE_VALID = ...
CE_STAGESHIFT = ...

class BlobFilter:
    """
    Predicate to be used by iter_blobs allowing to filter only return blobs which
    match the given list of directories or files.

    The given paths are given relative to the repository.
    """

    __slots__ = ...
    def __init__(self, paths: Sequence[PathLike]) -> None:
        """
        :param paths:
            tuple or list of paths which are either pointing to directories or
            to files relative to the current repository
        """
        ...
    def __call__(self, stage_blob: Tuple[StageType, Blob]) -> bool: ...

class BaseIndexEntryHelper(NamedTuple):
    """Typed namedtuple to provide named attribute access for BaseIndexEntry.
    Needed to allow overriding __new__ in child class to preserve backwards compat."""

    mode: int
    binsha: bytes
    flags: int
    path: PathLike
    ctime_bytes: bytes = ...
    mtime_bytes: bytes = ...
    dev: int = ...
    inode: int = ...
    uid: int = ...
    gid: int = ...
    size: int = ...

class BaseIndexEntry(BaseIndexEntryHelper):
    """Small Brother of an index entry which can be created to describe changes
    done to the index in which case plenty of additional information is not required.

    As the first 4 data members match exactly to the IndexEntry type, methods
    expecting a BaseIndexEntry can also handle full IndexEntries even if they
    use numeric indices for performance reasons.
    """

    def __new__(
        cls,
        inp_tuple: Union[
            Tuple[int, bytes, int, PathLike],
            Tuple[int, bytes, int, PathLike, bytes, bytes, int, int, int, int, int],
        ],
    ) -> BaseIndexEntry:
        """Override __new__ to allow construction from a tuple for backwards compatibility"""
        ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    @property
    def hexsha(self) -> str:
        """hex version of our sha"""
        ...
    @property
    def stage(self) -> int:
        """Stage of the entry, either:

            * 0 = default stage
            * 1 = stage before a merge or common ancestor entry in case of a 3 way merge
            * 2 = stage of entries from the 'left' side of the merge
            * 3 = stage of entries from the right side of the merge

        :note: For more information, see http://www.kernel.org/pub/software/scm/git/docs/git-read-tree.html
        """
        ...
    @classmethod
    def from_blob(cls, blob: Blob, stage: int = ...) -> BaseIndexEntry:
        """:return: Fully equipped BaseIndexEntry at the given stage"""
        ...
    def to_blob(self, repo: Repo) -> Blob:
        """:return: Blob using the information of this index entry"""
        ...

class IndexEntry(BaseIndexEntry):
    """Allows convenient access to IndexEntry data without completely unpacking it.

    Attributes usully accessed often are cached in the tuple whereas others are
    unpacked on demand.

    See the properties for a mapping between names and tuple indices."""

    @property
    def ctime(self) -> Tuple[int, int]:
        """
        :return:
            Tuple(int_time_seconds_since_epoch, int_nano_seconds) of the
            file's creation time"""
        ...
    @property
    def mtime(self) -> Tuple[int, int]:
        """See ctime property, but returns modification time"""
        ...
    @classmethod
    def from_base(cls, base: BaseIndexEntry) -> IndexEntry:
        """
        :return:
            Minimal entry as created from the given BaseIndexEntry instance.
            Missing values will be set to null-like values

        :param base: Instance of type BaseIndexEntry"""
        ...
    @classmethod
    def from_blob(cls, blob: Blob, stage: int = ...) -> IndexEntry:
        """:return: Minimal entry resembling the given blob object"""
        ...
